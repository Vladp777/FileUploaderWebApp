@page "/"
@using FileUploader.Models
@using FileUploader.Services
@rendermode InteractiveServer
@inject IBlobService blobService

<PageTitle>Home</PageTitle>

<h1>Upload Form</h1>

<EditForm Model="uploadModel" OnValidSubmit="OnUploadSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="email">Email</label>
        <br/>
        <InputText @bind-Value="@uploadModel.Email" placeholder="Email"></InputText>
        <ValidationMessage For="() => uploadModel.Email" />
    </div>
    <p></p>
    <div class="form-group">
        <label>
            <InputFile class="form-control" disabled="@_fileLoading" accept=".docx" OnChange="@OnInputFileChange" single />
            @if (!_isValidFileType)
            {
                <div class="text-danger">
                    Please select only .docx files
                </div>
            }
        </label>
        @if (_fileLoading)
        {
            <i class="fa fa-refresh"></i> <span>Loading...</span>
        }
        <ValidationMessage For="() => uploadModel.Files" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Send to Blob</button>

    @if (_fileUploaded)
    {
        <div class="alert alert-success mt-3" role="alert">
            File uploaded successfully!
        </div>
    }
    @if (_isError)
    {
        <div class="alert alert-danger mt-3" role="alert">
            Something went wrong. Try again.
        </div>
    }
</EditForm>


@code {
    private bool _fileLoading;
    private bool _isValidFileType = true;
    private bool _isError;
    private bool _fileUploaded = false;
    private UploadModel uploadModel = new();

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _fileUploaded = false;

        uploadModel.Files = e.GetMultipleFiles();

        foreach (var file in uploadModel.Files)
        {
            if (!file.ContentType.Equals("application/vnd.openxmlformats-officedocument.wordprocessingml.document", StringComparison.OrdinalIgnoreCase))
            {
                _isValidFileType = false;

                uploadModel.Files = null;
            }
            else
            {
                _isValidFileType = true;
            }
        }
        this.StateHasChanged();
    }
    private async Task OnUploadSubmit()
    {
        _fileLoading = true;
        if(uploadModel.Files == null)
        {
            _isError = true;
         
            return;
        }
        foreach (var file in uploadModel.Files)
        {
            try
            {
                await blobService.UploadFileAsync(file, uploadModel.Email);

                _fileUploaded = true;

                uploadModel = new();

            }
            catch (Exception ex)
            {
                _isError = true;

            }
        }

        _fileLoading = false;
        this.StateHasChanged();
    }

    
}